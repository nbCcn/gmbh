<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="OFF" monitorInterval="3600">
    <!-- 定义下面的引用名 -->
    <Properties>
        <property name="log_pattern">%X{request_uri} %X{user_id} %X{user_name}[%date{yyyy-MM-dd HH:mm:ss.SSS}] %level [%c:%line] - %msg%n</property>
        <property name="basePath">/log/client</property>
        <!-- 日志切割的最小单位 -->
        <property name="every_file_size">10M</property>
        <!-- 日志输出级别 -->
        <property name="output_log_level">debug</property>
        <!--日志输出编码-->
        <property name="charset">UTF-8</property>
        <!--日志生成间隔-->
        <property name="log_generate_time">1</property>
        <!--日志保留數量-->
        <property name="file_save_num">50</property>
    </Properties>

    <CustomLevels>
        <CustomLevel name="myLevel" intLevel="99" />
        <CustomLevel name="OPERATE" intLevel="320" />
        <CustomLevel name="KINGDEE" intLevel="350" />
        <CustomLevel name="DINGTALK" intLevel="380" />
    </CustomLevels>

<!--<Routing name="thread">-->
    <!--先定义所有的appender-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
        </Console>

        <!--   输出到文件     -->
        <!--filePattern是log自动压缩后的压缩包的格式-->
        <RollingRandomAccessFile  name="running-log-info" fileName="${basePath}/info.log"
                     filePattern="${basePath}/info-%d{yyyy-MM-dd}-%i.log.gz">
            <!--log信息的输出的格式-->
            <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
            <Policies>
                <!--间隔为1,所谓的间隔是filePattern中的%d{yyyy-MM-dd}精确到的单位,如果是%d{yyyy-MM-dd-HH-mm},那么就是一分钟产生一个压缩文件-->
                <TimeBasedTriggeringPolicy interval="${log_generate_time}" modulate="true" />
                <!--每10M生成一个新的文件-->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
            <!--意思是只保留最近的50个文件-->
            <DefaultRolloverStrategy max="${file_save_num}" />

            <filters>
                <!--
                    <ThresholdFilter level="myLevel" onMatch="DENY"  onMismatch="NEUTRALs"/>
                    等级<=100,拒绝,其他的接受
                    <ThresholdFilter level="INFO" onMatch="ACCEPT"  onMismatch="DENY"/>
                    等级<=500,接受,其他的不接受
                    这两个过滤器取交集
                -->
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </RollingRandomAccessFile>


        <RollingRandomAccessFile  name="running-log-warn" fileName="${basePath}/error.log"
                                  filePattern="${basePath}/error-%d{yyyy-MM-dd}-%i.log.gz">
            <!--log信息的输出的格式-->
            <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
            <Policies>
                <!--间隔为1,所谓的间隔是filePattern中的%d{yyyy-MM-dd}精确到的单位,如果是%d{yyyy-MM-dd-HH-mm},那么就是一分钟产生一个压缩文件-->
                <TimeBasedTriggeringPolicy interval="${log_generate_time}" modulate="true" />
                <!--每10M生成一个新的文件-->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
            <!--意思是只保留最近的50个文件-->
            <DefaultRolloverStrategy max="${file_save_num}" />

            <filters>
                <ThresholdFilter level="FATAL" onMatch="DENY"  onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile  name="running-log-operate" fileName="${basePath}/operate.log"
                                  filePattern="${basePath}/operate-%d{yyyy-MM-dd}-%i.log.gz">
            <!--log信息的输出的格式-->
            <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
            <Policies>
                <!--间隔为1,所谓的间隔是filePattern中的%d{yyyy-MM-dd}精确到的单位,如果是%d{yyyy-MM-dd-HH-mm},那么就是一分钟产生一个压缩文件-->
                <TimeBasedTriggeringPolicy interval="${log_generate_time}" modulate="true" />
                <!--每10M生成一个新的文件-->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
            <!--意思是只保留最近的50个文件-->
            <DefaultRolloverStrategy max="${file_save_num}" />

            <filters>
                <ThresholdFilter level="WARN" onMatch="DENY"  onMismatch="NEUTRAL"/>
                <ThresholdFilter level="OPERATE" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile  name="running-log-kingdee" fileName="${basePath}/kingdee.log"
                                                             filePattern="${basePath}/kingdee-%d{yyyy-MM-dd}-%i.log.gz">
        <!--log信息的输出的格式-->
        <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
        <Policies>
            <!--间隔为1,所谓的间隔是filePattern中的%d{yyyy-MM-dd}精确到的单位,如果是%d{yyyy-MM-dd-HH-mm},那么就是一分钟产生一个压缩文件-->
            <TimeBasedTriggeringPolicy interval="${log_generate_time}" modulate="true" />
            <!--每10M生成一个新的文件-->
            <SizeBasedTriggeringPolicy size="${every_file_size}" />
        </Policies>
        <!--意思是只保留最近的50个文件-->
        <DefaultRolloverStrategy max="${file_save_num}" />

        <filters>
            <ThresholdFilter level="OPERATE" onMatch="DENY"  onMismatch="NEUTRAL"/>
            <ThresholdFilter level="KINGDEE" onMatch="ACCEPT" onMismatch="DENY"/>
        </filters>
        </RollingRandomAccessFile>

        <RollingRandomAccessFile  name="running-log-dingtalk" fileName="${basePath}/dingtalk.log"
                                  filePattern="${basePath}/dingtalk-%d{yyyy-MM-dd}-%i.log.gz">
            <!--log信息的输出的格式-->
            <PatternLayout pattern="${log_pattern}" charset="${charset}"/>
            <Policies>
                <!--间隔为1,所谓的间隔是filePattern中的%d{yyyy-MM-dd}精确到的单位,如果是%d{yyyy-MM-dd-HH-mm},那么就是一分钟产生一个压缩文件-->
                <TimeBasedTriggeringPolicy interval="${log_generate_time}" modulate="true" />
                <!--每10M生成一个新的文件-->
                <SizeBasedTriggeringPolicy size="${every_file_size}" />
            </Policies>
            <!--意思是只保留最近的50个文件-->
            <DefaultRolloverStrategy max="${file_save_num}" />

            <filters>
                <ThresholdFilter level="KINGDEE" onMatch="DENY"  onMismatch="NEUTRAL"/>
                <ThresholdFilter level="DINGTALK" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </RollingRandomAccessFile>

        <!--    将log输入到远程的服务器中    -->
       <!-- <Syslog name="syslog" host="localhost" format="RFC5424" mdcId="mdc" enterpriseNumber="18060" appName="XXXX" facility="LOCAL0" port="9080" newline="true" protocol="TCP">
            <LoggerFields>
                <KeyValuePair key="category" value="%c" />
                <KeyValuePair key="priority" value="%p" />
            </LoggerFields>
        </Syslog>-->
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--建立一个默认的root的logger，需要在root的level中指定输出的级别，-->
        <Root level="INFO">
            <AppenderRef ref="running-log-info"/>
            <AppenderRef ref="Console"/>
            <AppenderRef ref="running-log-warn"/>
            <AppenderRef ref="running-log-operate"/>
            <AppenderRef ref="running-log-kingdee"/>
            <AppenderRef ref="running-log-dingtalk"/>
        </Root>
    </Loggers>
</Configuration>